### Pre_Requisites ###
---
- name: Disabling Swap on all nodes
  become: true
  shell: swapoff -a

- name: Disable SWAP permanently in fstab
  become: true
  shell: |
    sed -i.bak '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

- name: 'Stop and disable the firewalld service'
  become: true
  service:
    name: 'firewalld'
    state: 'stopped'
    enabled: 'false'  

#Disable node_exporter service
- name: stop and disable a node_exporter service
  become: true
  service:
    name: "node_exporter"
    state: 'stopped'
    enabled: 'false'

- name: Disable SELinux permanently
  ansible.built.lineinfile: 
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=disabled'
    backup: yes 

- name: check PV 
  become: true
  command: "pvs /dev/sdb"
  register: pv_result
  ignore_errors: true


- name: pv creation
  become: true
  shell: "pvcreate /dev/sdb"
  when: pv_result.rc != 0

- name: check VG
  become: true
  command: "vgs kubevg"
  register: vg_result
  ignore_errors: true
  
- name: vg creation
  become: true
  shell: "vgcreate kubevg /dev/sdb"
  when: vg_result.rc != 0

- name: check LV
  become: true
  command: "lvs kubevg/containers"
  register: lv_result
  ignore_errors: true
  
- name: lv creation
  become: true
  shell: "lvcreate --name containers -l 100%FREE kubevg"
  when: lv_result.rc != 0
  

- name: Make filesystem xfs
  become: true
  filesystem: 
    fstype: xfs
    dev: /dev/kubevg/containers
  when: lv_result.rc != 0 
  
- name: Create containerd directory
  become: true
  file: 
    path: /var/lib/containerd
  state: directory

- name: Mount containerd directory
  become: true
  mount: 
    path: /var/lib/containerd
    src: /dev/kubevg/containers
    fstype: xfs
    state: mounted

- name: Add partition to fstab
  become: true
  lineinfile:
    path: /etc/fstab
    line: /dev/mapper/kubevg-containers /var/lib/containerd xfs defaults 0 0

- name: Remove noexec from /etc/fstab
  become: yes
  replace:
    path: /etc/fstab
    regexp: '^(.*\/dev\/mapper\/rootvg-lvvar\s+\/var\s+xfs\s+.*)noexec(,)?(.*)$'
    replace: '\1\3'


### IP Forwarding ###
- name: add modprobe for all nodes
  shell: "{{ item }}"
  with_items:
    - modprobe overlay
    - modprobe br_netfilter
    - modprobe ip_vs
    - modprobe ip_vs_rr
    - modprobe ip_vs_wrr
    - modprobe ip_vs_sh

- name: Create Kuberenetes modules configuration
  copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: 
      br_netfilter
      ip_vs
      ip_vs_rr
      ip_vs_wrr
      ip_vs_sh
      overlay

- name: Let iptables see bridged traffic.
  copy: 
    dest: /etc/sysctl.d/kubernetes.conf
    content: | 
      net.ipv4.ip_forward = 1 
      net.bridge.bridge-nf-call-ip6tables = 1 
      net.bridge.bridge-nf-call-iptables = 1

####OS Tuning parameters

- name: Ensure fs.inotify.max_user_watches is set
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^fs.inotify.max_user_watches'
    line: 'fs.inotify.max_user_watches={{ inotify}}'
    state: present

- name: Ensure fs.inotify.max_user_instances is set
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^fs.inotify.max_user_instances'
    line: 'fs.inotify.max_user_instances={{ inotify}}'
    state: present

- name: Ensure fs.inotify.max_queued_events is set
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^fs.inotify.max_queued_events'
    line: 'fs.inotify.max_queued_events='
    state: present

- name: Set TCP memory
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.ipv4.tcp_mem = 1150137 1533519 2300274"
    state: present

- name: set receive socket memory
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.core.rmem_max = 12582912"
    state: present

- name: set send socket memory
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.core.wmem_max = 12582912"
    state: present

- name: set option memory buffers
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.core.optmem_max = 81920"

- name: set ephemeral port range
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.ipv4.ip_local_port_range = 15000 61000"

- name: set TCP FIN timeout
  lineinfile:
    path: /etc/sysctl.conf
    line: "net.ipv4.tcp_fin_timeout = 30"
    state: present

- name: set max connections
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.core.somaxconn = 2048"
    state: present

- name: set txqueuelen 
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.core.netdev_max_backlog = 2000"
    state: present

- name: set tcp max syn backlog
  lineinfile: 
    path: /etc/sysctl.conf
    line: "net.ipv4.tcp_max_syn_backlog = 2048"
    state: present

- name: set OS connections limit
  lineinfile: 
    path: /etc/sysctl.conf
    line: "fs.file-max = 1048576"
    state: present

- name: set ulimit -n (soft file, hard file)
  lineinfile: 
    path: /etc/security/limits.conf
    line: "* soft nofile 1024\n* hard nofile 65536"
    create: yes

- name: set maximum number of packets, queued on the INPUT
  lineinfile:
    path: /etc/sysctl.conf 
    line: "net.core.netdev_max_backlog = 5000"
    state: present


- name: Apply sysctl settings
  command: systcl --system

- name: Apply sysctl values
  command: systcl -p

- name: adding a repository file for kubernetes
  template:
    src: "{{ docker_repo_file }}"
    dest: "{{ docker_conf_dest }}"

- name: install yum packages for containerd
  yum:
    name: "{{ dependencies.pkg_docker }}"

- name: install yum packages for containerd
  yum:
    name: "{{ dependencies.pkg_docker }}"

- name: introducing pause to configure daemon to ready
  pause:
    seconds: 30
  
- name: start and enable Containerd 
  service:
    name: containerd.service
    state: started
    enabled: yes

  #notify:
  #  - start and enable Containerd 

- name: config for containerd
  shell: mkdir -p "{{ containerd_conf_file_dir }}"
  
- name: adding a containerd config.toml
  template:
    src: "{{ contanierd_conf_file }}"
    dest: "{{ contanierd_conf_dest }}"

- name: introducing pause to configure daemon to ready
  pause:
    seconds: 30

### Kubernetes Setup ###
- name: adding a repository file for Kubernetes
  template:
    src: "{{ kubernetes_repo_file }}"
    dest: "{{ kubernetes_conf_dest }}"
    
- name: install yum packages for cri-tools
  yum:
    name: cri-tools-{{ crictl_version }}
    state: present 

    
- name: install yum packages for kubernetes
  yum:
    name: "{{ dependencies.pkg_kubernetes }}"

- name: introducing pause for providing delay to setup installed service
  pause:
    seconds: "{{ machine_pause_time }}"

- name: start and enable kubernetes service
  systemd:
    name: kubelet.service
    state: started
    enabled: yes

- name: introducing pause to configure daemon to ready
  pause:
    seconds: 30

- name: Install versionlock package to prevent packages from being updated
  yum:
    name: yum-plugin-versionlock
  become: true

- name: Prevent packages from auto-update
  become: true
  shell: yum versionlock kubeadm kubernetes-cni kubelet kubectl cri-tools containerd containerd.io falco

- name: Install python39 package 
  yum:
    name: python39
    state: present
  become: true

- name: Install nfs-utils
  yum:
    name: nfs-utils
    state: present
  become: true

- name: Install tc
  yum:
    name:  iproute
    state: present
  become: true 

## Unmask, Start & Enable rpc-bind as a dependency for NFS ###
- name: check rpcbind service status
  service_facts:

- name: Enable service rpcbind and ensure it is not masked
  systemd:
    name: rpcbind
    state: started
    enabled: yes
    masked: no
  when: '"rpcbind" in ansible_facts.services'

- name: Upgrade all packages excluding the versionlock packages
  dnf:
    name: '*'
    state: latest

- name: Reboot the machine with all defaults
  reboot:
    reboot_timeout: 300

- name: Uptime of the node
  register: uptimeoutput
  command: "uptime"
- debug:
    var: uptimeoutput.stdout_lines
  
- name: crictl configuration settings
  shell: crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock