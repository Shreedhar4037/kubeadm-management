##Initialise Control node################
- name: Intialise control node
  shell: kubeadm init --kubernetes-version="{{ kubernetes_version }}" --control-plane-endpoint "{{ primary_control_node }}:{{ control_nodeport }}" --pod-network-cidr="{{ network_cidr }}" --service-cidr="{{ service_cidr }}" --skip-phases=addon/kube-proxy  --image-repository="{{ image_repository }}" --upload-certs
  register: output
  when: "my_host_alias in groups['control'] and my_host_alias is defined"
  become: true
  tags: kubes
- debug: var=output

- set_fact:
    initout: "{{ output.stdout }}"
  when: "my_host_alias in groups['control'] and my_host_alias is defined"

- set_fact: 
    controlplane_token: "{{ initout | regex_search('(\\skubeadm.*\\n.*\\n.*)') | regex_replace('\\\\\\n',' ') | regex_replace('\\s\\s\\s\\s\\s',' ') }}"
  when: "my_host_alias in groups['control'] and my_host_alias is defined"

- set_fact:
    worker_token: "{{ initout | regex_search('(\\n\\n(kubeadm.* \\\\\\n.*)\\s)') | regex_replace('\\\\\\n',' ') | regex_replace('\\s\\s\\s\\s\\s',' ') }}"
  when: "my_host_alias in groups['control'] and my_host_alias is defined"

- name: Run commands to create kube config
  shell: "{{ item }}"
  with_items:
    - mkdir -p $HOME/.kube
    - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - chown $(id -u):$(id -g) $HOME/.kube/config
  when: "my_host_alias in groups['control'] and my_host_alias is defined"
  become: true
  tags: kubes

- name: introducing pause to pass health checks on AVI
  pause:
    seconds: 60
  tags: setup
  become: true

##Helm####

# - name: Download the HELM binary
#   get_url: 
#     url: https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz
#     dest: /tmp/helm-v3.0.0-linux-amd64.tar.gz
#   when: "my_host_alias in groups['control'] and my_host_alias is defined"

# - name: Extract Helm binary
#   unarchive:
#     src: /tmp/helm-v3.0.0-linux-amd64.tar.gz
#     dest: /tmp
#     remote_src: yes
#   when: "my_host_alias in groups['control'] and my_host_alias is defined"

# - name: Move helm binary to /usr/local/bin
#   command: mv /tmp/linux-amd64/helm /usr/local/bin/helm
#   when: "my_host_alias in groups['control'] and my_host_alias is defined"
 
# - name: Ensure helm is executable
#   file: 
#     path: /usr/local/bin/helm
#     mode: '0755'
#   when: "my_host_alias in groups['control'] and my_host_alias is defined"

# - name: Hlem path check
#   command: /usr/local/bin/helm
#   when: "my_host_alias in groups['control'] and my_host_alias is defined"

# ####CILIUM Configuration##############
# - name: Extract tar file to /tmp
#   unarchive: 
#     src: /tmp/cilium-1.17.0.tar.gz
#     dest: /tmp/
#     remote_src: yes
#   when: my_host_alias in groups['control'] and my_host_alias is defined

# - name: adding a cilium custom values
#   template: 
#     src: "../templates/cilium-values.yaml.j2"
#     dest: "/tmp/cilium/custom-values.yaml"
#   when: my_host_alias in groups['control'] and my_host_alias is defined 

# - name: Install cilium helm chart from local directory
#   kubernetes.core.helm: 
#     name: cilium
#     chart_ref: /tmp/cilium
#     namespace: kube-system
#     values_files: /tmp/cilium/custom-values.yaml
#     binary_path: /usr/bin/local/helm
#   when: my_host_alias in groups['control'] and my_host_alias is defined


- name: introducing pause to get the nodes ready
  pause:
    seconds: 60
  tags: setup
  become: true


- name: Join control nodes with the existing control node
  command: "{{ hostvars['Master1']['controlplane_token'] }}"
  #command: kubeadm join dc15-kongk8s-dev.neustar.net:443 --token c9295p.hkabmmheasd7wzwp --discovery-token-ca-cert-hash sha256:e089113ad727878c3623c36b0a483ce355da88b53c7f9f5e007b5906cd0aec2f
  when: "hostvars['Master1']['controlplane_token'] is defined and my_host_alias in groups['controllers'] and my_host_alias is defined"
  become: true
  tags: kubes

- name: Join worker nodes to the control node
  command: "{{ hostvars['Master1']['worker_token'] }}"
  when: "hostvars['Master1']['worker_token'] is defined and my_host_alias in groups['workers'] and my_host_alias is defined"
  become: true
  tags: kubes
  
### Enabling Server-Metrics on K8's###
- name: introducing pause for the cluster to be ready
  pause:
    seconds: 60
  tags: setup
  become: true

- name: Run commands to create kube config on remaining master nodes
  shell: "{{ item }}"
  with_items:
    - mkdir -p $HOME/.kube
    - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - chown $(id -u):$(id -g) $HOME/.kube/config
  when: "my_host_alias in groups['controllers'] and my_host_alias is defined"
  become: true
  tags: kubes

- name: Check if ServerTLSBootstrap is present
  shell: 'grep -c "^serverTLSBootstrap: true" /var/lib/kubelet/config.yaml || true'
  register: tls
  become: true
 
- name: Insert serverTLSBootstrap at the end of kubelet config file.
  lineinfile:
    path: /var/lib/kubelet/config.yaml
    line: "serverTLSBootstrap: true"
  become: true
  register: file
  when: tls.stdout == "0"

- name: Adding line to the kubelet info
  become: true 
  blockinfile:
    path: /var/lib/kubelet/config.yaml
    block: |
      containerLogMaxSize: {{ containerLogMaxSize }}
      containerLogMaxFiles: {{ containerLogMaxFiles }}
    state: present



- name: Adding the CipherSuites line to the  kubelet config
  lineinfile:
    path: /var/lib/kubelet/config.yaml
    line: "tlsCipherSuites: [TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA]"
    state: present

- name: Adding line to the kubelet info
  become: true 
  blockinfile:
    path: "{{kubelet_config}}"
    block: |
      containerLogMaxSize: {{ containerLogMaxSize }}
      containerLogMaxFiles: {{ containerLogMaxFiles }}
    state: present
  
- name: Restart kubelet server to get the config changes into effect
  service:
    name: kubelet
    state: restarted
  become: true
  when: file.changed

- name: introducing pause for the certs to be available
  pause:
    seconds: 30
  tags: setup
  become: true

- name: Adding the cipherSuites line to the etcd
  lineinfile:
    path: /etc/kubernetes/manifests/etcd.yaml
    insertbefore: 'image'
    line: "    - --cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
    firstmatch: yes
    state: present
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Adding the cipherSuites line to the kube apiserver
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertbefore: 'image'
    line: "    - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA"
    firstmatch: yes
    state: present
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Adding the cipherSuites line to the kube-controller-manager.yaml
  lineinfile:
    path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    insertbefore: 'image'
    line: "    - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA"
    firstmatch: yes
    state: present
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Adding the CipherSuites line to the  kube-scheduler
  lineinfile:
    path: /etc/kubernetes/manifests/kube-scheduler.yaml
    insertbefore: 'image'
    line: "    - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA"
    firstmatch: yes
    state: present
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Commenting the phrase in kube-scheduler
  replace:
    path: /etc/kubernetes/manifests/kube-scheduler.yaml
    regexp: '- --port=0'
    replace: '#- --port=0'
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Commenting the phrase in kube-controller-manager
  replace:
    path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    regexp: '- --port=0'
    replace: '#- --port=0'
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"


- name: Create audit directory
  become: true
  file:
    path: /var/lib/containerd/audit
    state: directory
    mode: '0755'
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Copy the policy.yaml to the audit directory
  become: true
  copy:
    src: ./policy.yaml
    dest: /var/lib/containerd/audit/
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"  

- name: Update apiserver manifest at kube-apiserver.yaml
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertbefore: '--advertise-address'
    line: "{{ item }}"
  with_items:
  - '    - --audit-policy-file=/etc/kubernetes/audit/policy.yaml'
  - '    - --audit-log-path=/etc/kubernetes/audit/audit.log'
  - '    - --audit-log-maxsize=500'
  - '    - --audit-log-maxbackup=10'
  - '    - --enable-aggregator-routing=true'
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Add the volume mount in the kube-apiserver
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: 'volumeMounts:'
    line: "{{ item }}"
  with_items:
  - '      name: audit'
  - '    - mountPath: /etc/kubernetes/audit'
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"

- name: Add the volumes in the kube-apiserver
  blockinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: 'volumes:'
    block: |2
        - hostPath:
            path: /var/lib/containerd/audit
            type: DirectoryOrCreate
          name: audit
  when: "my_host_alias in groups['controllers'] or my_host_alias in groups['control']"   

- name: Inroducing pause for the cluster to be ready
  pause: 
    seconds: 60 
  tags: setup
  become: true

- name: Create Namespace
  shell: kubectl create ns "{{ item }}"
  with_items: 
    - velero 
    - prom-operator 
    - fluentd 
    - cos-utility
